name: "Build Main"
on:
  push:
    branches:
      - main
jobs:
  protoc:
    name: "Compile Proto files"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: arduino/setup-protoc@v1
        with:
          version: "3.x"
      - name: Installing protoc-gen-go
        run: |
          go install github.com/golang/protobuf/protoc-gen-go
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      - name: Generating protos
        run: |
          echo $GOPATH
          protoc --proto_path=plugins/proto/ --go_out=plugins/proto --go_opt=paths=source_relative Plugin.proto Cacher.proto
          protoc -I ./plugins/proto/ ./plugins/proto/Plugin.proto ./plugins/proto/Cacher.proto --go-grpc_out=./plugins/proto
  build:
    name: Build ${{ matrix.package.package }} on ${{ matrix.arch }} for ${{matrix.os}}
    runs-on: ubuntu-latest
    needs: [protoc]
    strategy:
      matrix:
        os: [darwin, linux, windows]
        arch: [amd64, arm64]
        package:
          - exeName: bashPlugin
            package: github.com/radding/harbor-bash-runner
            dir: bashRunner
          - exeName: harbor
            package: github.com/radding/harbor
            dir: core
          - exeName: gitPlugin
            package: github.com/radding/harbor-gitplugin
            dir: githubplugin
          - exeName: localCachePlugin
            package: github.com/radding/harbor-local-cache
            dir: localCache

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
      - name: Test ${{ matrix.package.package }}
        working-directory: ${{ matrix.package.dir }}
        run: pwd && go test ${{matrix.package.package }}/...
      - name: Build ${{ matrix.package.package }}
        if: ${{matrix.os}} == "windows"
        working-directory: ${{ matrix.package.dir }}
        run: go build -o ${{ matrix.package.exeName }}.exe .
      - name: Build ${{ matrix.package.package }}
        if: ${{matrix.os}} != "windows"
        working-directory: ${{ matrix.package.dir }}
        run: go build -o ${{ matrix.package.exeName }} .
